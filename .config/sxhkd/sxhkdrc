#######################################
#            _     _       _          
#   _____  _| |__ | | ____| |_ __ ___ 
#  / __\ \/ / '_ \| |/ / _` | '__/ __|
#  \__ \>  <| | | |   < (_| | | | (__ 
#  |___/_/\_\_| |_|_|\_\__,_|_|  \___|
#######################################

#
# wm independent hotkeys
#

# terminal emulator
super + Return
	alacritty

# open terminal in the same directory of focused window
super + shift + Return
	alacritty --working-directory "`xcwd`"

# Open FM
super + backslash
	nautilus

# Open FM in same directory as focused window
super + shift + backslash
	nautilus '`xcwd`'

# Rofi taskwarrior
super + alt + space
	rofi-task

# program launcher
super + e
	./.config/rofi/launchers/colorful/launcher.sh

# Flash currently focused window
super + ctrl + w
	nc_flash_window

#Toggle chill/focus mode
super + shift + f
	~/.config/sxhkd/focus_mode.sh

# pick *moji
super + shift + m
	splatmoji copy

# switch windows
super + w
	rofi -theme ~/.config/rofi/configTall.rasi -show window -window-format "\{c\} \{t\}" -window-thumbnail

#Switch windows on current desktop
super + shift + w
	rofi -theme ~/.config/rofi/configTall.rasi -show windowcd -window-format "\{c\} \{t\}" -window-thumbnail

# get window title
super + alt + w
	notify-send -u normal "$(xdotool getactivewindow getwindowname)"

# Rofi notes/todo
super + space
	rofi_notes.sh

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd && notify-send -u normal -a Sxhkd  -i /usr/share/icons/Nord-Icon/48x48/apps/preferences-desktop-keyboard.svg "Config reloaded"

# Toggle top bar
super + b; {b,e}
	{togglebar.sh,~/.config/qtile/toggle_eww.sh &}

# draw terminal
#super + button3
#	~/.config/sxhkd/draw_term &

# Bspwm control from the mouse (this is a macro on my mouse)
super + control + alt + grave
	cat ~/.config/jgmenu/bspwm.csv | jgmenu --simple

# Open right click menu on root window
~button3
	root_menu.sh

# teleport cursor
super + alt + c
	xdotool mousemove --window $(bspc query -N -n) --polar 0 0
	
# Print screen
Print
	prtscr

super + Print
	prtregion

# Brightness up
super + F10
	~/.config/qtile/eww_bright.sh up

# Brightness down
super + F9
	~/.config/qtile/eww_bright.sh down

# volume up
XF86AudioRaiseVolume
	~/.config/qtile/eww_vol.sh up

# volume down
XF86AudioLowerVolume
	~/.config/qtile/eww_vol.sh down

# toggle mute
XF86AudioMute
	~/.config/qtile/eww_vol.sh mute

# mic volume up
super + XF86AudioRaiseVolume
	vol pulsemic up

# mic volume down
super + XF86AudioLowerVolume
	vol pulsemic down

# mic toggle mute
super + XF86AudioMute
	vol pulsemic mute

# Toggle pomodoro
super + F1
	kill -USR1 $(pgrep pomod)

# Reset Pomodoro
super + F2
	kill -HUP $(pgrep pomod)

# Skip to next round of pomodoro
super + F3
	kill -USR2 $(pgrep pomod)

# toggle vpn status
super + F4
	vpn_toggle.sh

# play last/ restart audio
super + F7
	playerctl previous

# Play next audio
super + F8
	playerctl next

# toggle play/pause audio
super + F5
	playerctl play-pause

# stop audio
super + F6
	playerctl stop

# Rofi file search and directory opener
super + z
	rofi -show file-browser-extended -file-browser-show-hidden -theme ~/.config/rofi/configTall.rasi -file-browser-cmd 'handlr open'

# Rofi google
super + shift + z
	rofi-search.sh

# display sxhkd bindings
super + a
	sxhkd_help

# edit sxhkd bindings
super + shift + a
	emacs ~/.config/sxhkd/sxhkdrc

# record selected part of screen in mp4/gif
super + r; {m,g}
	{mp4,gif}

# toggle picom
super + shift + p
	togglepicom

# Greenclip
super + x	
	greenclip.sh

# Vomit a swallow
super + v
	  xdo id | pidswallow -gt

# toggle scratchpad terminal
super + d
	tdrop -m -w 69% -h 60% -x 15% -y 74 -s Dropdown alacritty --class dropdown
 
# toggle scratchpad of current selected window
super + shift + d
	tdrop -m -w 69% -h 60% -x 15% -y 74 current

# clear current dropdown window (not terminal, the one grabbed from above command)
super + ctrl + d
	tdrop --clear current; \
	notify-send -u normal -t 3000 " Current dropdown window cleared"	

# Outer padding script
super + {minus, equal}
	padding.sh {-,+}

# adjust gap size
super + shift + {minus,equal}
	bspc config -d focused window_gap $(( $(bspc config -d focused window_gap) {-,+} 8 ))

# reset gaps/outer padding
super + BackSpace
	bspc config -d focused top_padding 9; \
	bspc config -d focused right_padding 9; \
	bspc config -d focused left_padding 9; \
	bspc config -d focused bottom_padding 9; \
	bspc config -d focused window_gap 18

# Color picker
super + shift + c
	colorpick.sh

# Close current notification
control + space
	dunstctl close

# Close all notifications
control + shift + space
	dunstctl close-all

# Open last notification
control + grave
	dunstctl history-pop

# Toggle notifications
super + shift + n
	toggledunst

# Rofi notification center
super + grave
	rofi_notif_center.sh

# Calculator
XF86Calculator
	gnome-calculator

# Toggle redshift
super + shift + l	
	./.config/qtile/toggle_redshift.sh

# Search for youtube vids
super + shift + y
	ytfzf

#
#  bspwm hotkeys
#

# Powermenu
super + shift + e
	./.config/rofi/powermenu/powermenu.sh

# restart bspwm
super + shift + r
	bspc wm -r

# close
super + shift + q
	bspc node -c

# kill
super + alt + q
	bspc node -k

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
	bspc node -s biggest.window

# circulate windows forward or backwards
super + c; {f,b}
	bspc node @/ -C {forward,backward}

# flip windows vertically or horizontally
super + f;{v,h}
	bspc node @/ -F {vertical,horizontal}

# rotate windows by certain amounts
super + r;{s,m,l}
	bspc node @/ -R {90,180,270}

# Equalize/balance windows
super + n; {e,b}
	bspc node @/ {-E,-B}

#
# Hide/ unhide windows
#

# hide window
super + h; h
	bspc node -g hidden

# list and unhide selected window
super + h; u
	rofi-bsphidwins

# Hide all windows on current desktop
super + h; a
	hideall

# unhide all hidden windows
super + h; shift + a
	unhideall

#
# state/flags
#

# set the window state
super + s;{t,p,f,a}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + p;{m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {Left,Down,Up,Right}
	bspc node -f {west,south,north,east}

# Smart move script; should rotate windows?
super + shift + {Left,Down,Up,Right}
	bspwm_smart_move {west,south,north,east}

# focus the node in the given direction (multimonitor)
#super + {_,shift + }{Left,Down,Up,Right}
#    mode={f,s}; \
#    direction={west,south,north,east}; \
#    monitor=$(bspc query -M --names -m $direction); \
#    if bspc query -N -n $direction -m focused > /dev/null; then \
#        bspc node -$mode $direction; \
#    else; \
#        if [ $mode = "f" ]; then \
#            if bspc query -N -d ${monitor}:focused > /dev/null; then \
#                bspc node -$mode $direction; \
#            else; \
#                bspc monitor -f $direction; \
#            fi; \
#        else; \
#            bspc node -m $direction --follow; \
#        fi; \
#    fi

# focus the node for the given path jump
#super + {p,b,comma,period}
#	bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {j,k}
	bspc node -f {next,prev}.local.!hidden.window.!locked

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node
super + Tab
	bspc node -f last

# focus the last desktop
super + shift + Tab
	bspc desktop -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
#super + {_,shift + }{1-9,0}
#	bspc {desktop -f,node -d} focused:'^{1-9,10}'

# Focus or bounce between desktops
super + {1-9,0}
	target='^{1-9,10}'; \
	[ "$(bspc query -D -d "$target")" != "$(bspc query -D -d)" ] \
		&& bspc desktop -f "$target" || bspc desktop -f last.local

# Send to the given desktop (multimonitor)
super + shift + {1-9,0}
    monitor=$(bspc query -M --names -m focused); \
    bspc node -d $monitor:'^'{1-9,10}

# Swap the contents of two desktops
super + alt + {0-9}
	target={10,1-9}; \
	bspc node "@focused:/" -s "@^$target:/" \
	    || bspc node "@focused:/" -d "^$target" \
	    || bspc node "@^$two:/" -d focused

# Swap monitors
#super + {less,greater}
#	bspc monitor --focus {prev,next}

#
# preselect
#

# preselect the direction
super + ctrl + {Left,Down,Up,Right}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

#resize
super + alt + {Left,Down,Up,Right}
	resize.sh {west,south,north,east}

# move a floating window
super + alt + {h,j,k,l}
	bspc node -v {-60 0,0 60,0 -60,60 0}

#
# Tabbing
#

# Tab focused window
super + t; t
	bsptab tab focused

# Add windows to tabbed
super + t; {Left,Down,Up,Right}
	bsptab add {west,south,north,east}.local focused

# Add all windows to tabbed
super + t; a
	bsptab add-all focused

# Remove windows from tabbed
super + t; {_,shift + }r
	bsptab remove{_,-all} focused

# Move tab to desktop
super + t; {1-9,0}
	bsptab remove-desktop focused {1-9,0}

# Add next new window to tabbed
super + t; {_,shift + }n
	bsptab add-{next,new} focused

# Stop auto-tabbing windows
super + t; s
	bsptab stop-add-new

#
# Layouts
#

# Set layout for current desktop to tall
super + l; t
	bsp-layout set tall && notify-send -u normal -t 3000 "Tall layout enabled"	

# Set layout for current desktop to wide
super + l; w
	bsp-layout set wide && notify-send -u normal -t 3000 "Wide layout enabled"	

# Set layout for current desktop to even
super + l; e
	bsp-layout set even && notify-send -u normal -t 3000 "Even layout enabled"

# Set layout for current desktop to tiled
super + l; i
	bsp-layout set tiled && notify-send -u normal -t 3000 "Tiled layout enabled"

# Set layout for current desktop to float
super + l; f
	~/.config/sxhkd/bspfloat &; \
	notify-send -u normal -t 3000 "Float layout enabled"

# Whats the current layout?
super + l; g
	~/.config/sxhkd/query_bsplayout

# Remove layout for focused desktop
super + l; r
	bsp-layout remove; \
	~/.config/sxhkd/killbspfloat && notify-send -u normal -t 3000 "Layout removed"

#
# Status notifications
#

# bspwm status
super + alt + F1
	status_notif.sh --bspwm

# calendar (date/time)
super + alt + F2
	status_notif.sh --calendar

# audio status
super + alt + F3
	status_notif.sh --audio

# brightness status
super + alt + F4
	status_notif.sh --brightness

# battery status
#super + alt + F5
#	status_notif.sh --battery

# internet status
super + alt + F6
	status_notif.sh --internet

# full simplified status
super + F11
	status_notif.sh --simple

# Full status
super + F12
	status_notif.sh --full
